# This is Lucas' take on a bullet-train style bash-git-prompt.sh theme.
# IMPORTANT: This theme requires a Powerline patched font. You can get them from here: https://github.com/powerline/fonts.
# I call this theme 'Bullet Train with tags', because there are separate sections that look like 'tags'. (Some sections are separate because it is too difficult to join sections that are not permanent (e.g. the git part) and have proper colouring apply to the arrows joining them).
# The original Bullet Train oh-my-zsh shell theme that inspired this is here: https://github.com/caiogondim/bullet-train-oh-my-zsh-theme.

override_git_prompt_colors() {
  GIT_PROMPT_THEME_NAME="Lucas_bullettrain_tags"

  # TEMPLATE STUFF

  # Time12a="\$(date +%H:%M)"
  # PathShort="\w";

  ## These are the color definitions used by gitprompt.sh
  # GIT_PROMPT_PREFIX="["                 # start of the git info string
  # GIT_PROMPT_SUFFIX="]"                 # the end of the git info string
  # GIT_PROMPT_SEPARATOR="|"              # separates each item

  # GIT_PROMPT_BRANCH="${Magenta}"        # the git branch that is active in the current directory
  # GIT_PROMPT_STAGED="${Red}●"           # the number of staged files/directories
  # GIT_PROMPT_CONFLICTS="${Red}✖ "       # the number of files in conflict
  # GIT_PROMPT_CHANGED="${Blue}✚ "        # the number of changed files

  # GIT_PROMPT_REMOTE=" "                 # the remote branch name (if any) and the symbols for ahead and behind
  # GIT_PROMPT_UNTRACKED="${Cyan}…"       # the number of untracked files/dirs
  # GIT_PROMPT_STASHED="${BoldBlue}⚑ "    # the number of stashed files/dir
  # GIT_PROMPT_CLEAN="${BoldGreen}✔"      # a colored flag indicating a "clean" repo

  ## For the command indicator, the placeholder _LAST_COMMAND_STATE_
  ## will be replaced with the exit code of the last command
  ## e.g.
  ## GIT_PROMPT_COMMAND_OK="${Green}✔-_LAST_COMMAND_STATE_ "    # indicator if the last command returned with an exit code of 0
  ## GIT_PROMPT_COMMAND_FAIL="${Red}✘-_LAST_COMMAND_STATE_ "    # indicator if the last command returned with an exit code of other than 0

  # GIT_PROMPT_COMMAND_OK="${Green}✔"    # indicator if the last command returned with an exit code of 0
  # GIT_PROMPT_COMMAND_FAIL="${Red}✘-_LAST_COMMAND_STATE_"    # indicator if the last command returned with an exit code of other than 0

  ## template for displaying the current virtual environment
  ## use the placeholder _VIRTUALENV_ will be replaced with
  ## the name of the current virtual environment (currently CONDA and VIRTUAL_ENV)
  # GIT_PROMPT_VIRTUALENV="(${Blue}_VIRTUALENV_${ResetColor}) "

  ## _LAST_COMMAND_INDICATOR_ will be replaced by the appropriate GIT_PROMPT_COMMAND_OK OR GIT_PROMPT_COMMAND_FAIL
  # GIT_PROMPT_START_USER="_LAST_COMMAND_INDICATOR_ ${Yellow}${PathShort}${ResetColor}"
  # GIT_PROMPT_START_ROOT="_LAST_COMMAND_INDICATOR_ ${GIT_PROMPT_START_USER}"
  # GIT_PROMPT_END_USER=" \n${White}${Time12a}${ResetColor} $ "
  # GIT_PROMPT_END_ROOT=" \n${White}${Time12a}${ResetColor} # "
  
  # LUCAS' CONTENT BELOW HERE
  
  # Lucas' colors
  # See http://askubuntu.com/a/558422, http://misc.flogisoft.com/bash/tip_colors_and_formatting for a good list
  ## Foreground colours
  normal="\[\e[39m\]"
  black="\[\e[30m\]"
  darkgray="\[\e[90m\]"
  red="\[\e[31m\]"
  lightred="\[\e[91m\]"
  green="\[\e[32m\]"
  lightgreen="\[\e[92m\]"
  yellow="\[\e[33m\]"
  blue="\[\e[34m\]"
  lightblue="\[\e[34m\]"
  brightblue="\[\e[38;5;27m\]"
  stashblue="\[\e[38;5;26m\]"
  purple="\[\e[35m\]"
  lightpurple="\[\e[35m\]"
  maroon="\[\e[38;5;88m\]"
  cyan="\[\e[36m\]"
  lightcyan="\[\e[36m\]"
  lightgray="\[\e[37m\]"
  white="\[\e[37m\]"
  orange="\[\e[38;5;166m\]"
  lightmagenta="\[\e[38;5;95m\]"
  ## Background colours
  bg_normal="\[\e[49m\]"
  bg_black="\[\e[40m\]"
  bg_red="\[\e[41m\]"
  bg_green="\[\e[42m\]"
  bg_yellow="\[\e[43m\]"
  bg_blue="\[\e[44m\]"
  bg_magenta="\[\e[45m\]"
  bg_cyan="\[\e[46m\]"
  bg_lgray="\[\e[47m\]"
  bg_gray="\[\e[100m\]"
  bg_lred="\[\e[101m\]"
  bg_lgreen="\[\e[102m\]"
  bg_lyellow="\[\e[103m\]"
  bg_lblue="\[\e[104m\]"
  bg_lmagenta="\[\e[105m\]"
  bg_lcyan="\[\e[106m\]"
  bg_white="\[\e[107m\]"
  
  # INVERTED BG COLOR OF TERMINAL: (i.e. when used as a foreground color for powerline arrows) change as needed
  TERM_COLOR=$'\e[38;2;40;44;52m' # 40;44;52 corresponds to RGB values of hex color #282C34
  
  INVERT_COLOR=$'\e[7m'
  
  # Powerline characters
  ## For Powerline characters see: echo -e "\ue0a0\ue0a1\ue0a2\ue0b0\ue0b1\ue0b2\ue0b3"
  ## Powerline font downloads: https://github.com/powerline/fonts
  ## Modern unicode patterns for Linux:
  ### PWRLN_SEP=$'\ue0b0'
  ### PWRLN_BRA=$'\ue0a0'
  ## The following works for MacOS bash: (see for working out the code: https://unix.stackexchange.com/questions/59054/bash-prompt-not-recognizing-unicode-escapes) $'\xee\x82\xb0 '
  ## I have replaced the unicode delarations with a simple copy+paste of the symbol, which seems to work in iTerm2 on MacOS.
  PWRLN_SEP=$''
  PWRLN_BRA=$''
  
  
  # Time part
  LUCAS_PROMPTSTART="${bg_lgray}${black} \$(date +%H:%M) ${lightgray}${bg_blue}${PWRLN_SEP}"
  
  # Hide the last command indicator if successful, show red cross tag if command failed
  GIT_PROMPT_COMMAND_OK=""
  GIT_PROMPT_COMMAND_FAIL="${bg_red}${white} ✘ ${red}${bg_lgray}${PWRLN_SEP}"
  
  # Directory part
  LUCAS_DIR="${bg_blue}${white} \w ${ResetColor}${blue}${PWRLN_SEP}"
  
  # Git part
  GIT_PROMPT_PREFIX="${bg_magenta}${white} ${PWRLN_BRA} "
  GIT_PROMPT_BRANCH="${bg_magenta}${white}"
  GIT_PROMPT_SEPARATOR="${bg_magenta} "
  ## Clean repo
  GIT_PROMPT_CLEAN="${bg_green}${white} ✔${green}"
  ## Dirty repo
  GIT_PROMPT_CHANGED="${bg_yellow} ${maroon}✚"      # the number of changed files
  GIT_PROMPT_STAGED="${bg_yellow} ${brightblue}●"   # the number of staged files
  GIT_PROMPT_CONFLICTS="${bg_yellow} ${red}✖"       # the number of files in conflict
  GIT_PROMPT_UNTRACKED="${bg_yellow} ${darkgray}…"  # the number of untracked files
  GIT_PROMPT_STASHED="${bg_yellow} ${stashblue}⚑"   # the number of stashed files
  ## Suffix (end the tag. Need the background color here because we're not sure what the foreground will be)
  GIT_PROMPT_SUFFIX=" ${INVERT_COLOR}${TERM_COLOR}${PWRLN_SEP}${ResetColor}"
  
  # MAIN SECTION
  GIT_PROMPT_START_USER="\n_LAST_COMMAND_INDICATOR_${LUCAS_PROMPTSTART}${LUCAS_DIR}${ResetColor}"
  GIT_PROMPT_END_USER="\n${lightgreen}$ ${ResetColor}"
  
  # Stuff for root
  GIT_PROMPT_START_ROOT="\n${bg_black}${red} root ${black}${bg_normal}${PWRLN_SEP} ${GIT_PROMPT_START_USER#'\n'}"
  GIT_PROMPT_END_ROOT="\n${red}# ${ResetColor}"
  
  # Override reset color so the script doesn't do weird things
  ResetColor=""
  
  ## Please do not add colors to these symbols
  # GIT_PROMPT_SYMBOLS_AHEAD="↑·"             # The symbol for "n versions ahead of origin"
  # GIT_PROMPT_SYMBOLS_BEHIND="↓·"            # The symbol for "n versions behind of origin"
  # GIT_PROMPT_SYMBOLS_PREHASH=":"            # Written before hash of commit, if no name could be found
  # GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING="L" # This symbol is written after the branch, if the branch is not tracked
}

reload_git_prompt_colors "Custom"
